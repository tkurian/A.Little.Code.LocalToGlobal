{"google":"","tagline":"Globalizing the word - one variable at a time ...","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"A.little.code.localtoglobal","body":"# LocalToGlobal\r\n\r\n## High-Level Description\r\nThis application will locate local variables specified by a user, and convert them into global variables. It essentially is a very small C parser! The really neat thing about this application is that it can be expanded on to further enhance it's functionality. When I get a bit more time on my hands, I plan on enhancing it in some way, shape or form. I also created a very basic UI to go with it. However, the UI is no where near complete or user friendly. It's something I just whipped up quickly for the purposes of displaying it here :o)\r\n\r\nThis application consists of four packages: \r\n\r\n#### management\r\n##### UIManager.java\r\nThis package consists of a class which launches currently launches the GUI. However, in the future, we can add the ability to launch different UIs based on user preference or even based on the OS - as I've done in the past. \r\n\r\n#### windows\r\n##### WindowsUI.java\r\nThis package consists of a class that manages the graphical user interface for the globalizer. It displays the .c file with the newly created global variable(s).\r\n\r\n#### utilities\r\nThis package consists of four main files. These include FileIO, UserInput, SymbolsEnum, and TypesEnum.\r\n\r\n##### 1. FileIO.java\r\nIs a class created in order to handle reading in the .c file specified by the user. The .c file will be the file in which the user would like certain local variables made as global variables. \r\n\r\n##### 2. UserInput.java\r\nIs a class created in order to handle reading in the .txt file. \r\n\r\nThe format of the .txt file is as follows:\r\nfloat x~my_sqrt\r\n\r\nwhere:\r\n- float x: is the variable to be converted to a global variable\r\n- ~ is the delimiter to separate the variable to monitor and the function it can be found in\r\n- the function in which the local variable is located within\r\n\r\nYou can specify as many local variables in a function as you so desire. You can also specify more than one function if you so desire. In the case you have multiple variables and functions you would like to specify, the .txt file format would be as follows:\r\n\r\nfloat x,float dx~my_sqrt\r\nfloat y~random_func\r\n\r\n##### 3. SymbolsEnum.java\r\nThis enum contains different 'symbols' which were used to locate the local variables that were specified by the user. The benefit of having this enum is that we can add more items to it if we ever feel like enhancing or even changing the functionality of this application in the future. \r\n\r\n##### 4. TypesEnum.java\r\nThis enum contains all the different variables types which could exist within a .c file. Here is what the enum contains:\r\n\r\n    INT(\"int\"), \r\n    BOOLEAN(\"boolean\"),\r\n    STRING(\"String\"),\r\n    FLOAT(\"float\"),\r\n    DOUBLE(\"double\"),\r\n    BYTE(\"byte\"), \r\n    CHAR(\"char\"), \r\n    LONG(\"long\"), \r\n    SHORT(\"short\"); \r\n\r\n#### globalize\r\n##### Globalize.java\r\nThis class does all the main work of figuring out when a function begins, if it's the function we care about, as well as changing the local variables into global variables. \r\n\r\n\r\n\r\n` `\r\n` `\r\n` `\r\n` `\r\n` `\r\n` `\r\n` `\r\n` `\r\n` `\r\n` `\r\n` `\r\n` `\r\n` `\r\n` `\r\n` `\r\n` `\r\n` `\r\n` `\r\n` `\r\n` `\r\n` `\r\n` `\r\n` `\r\n` `\r\n` `\r\n` `\r\n` `\r\n` `\r\n` `\r\n` `\r\n` `\r\n` `\r\n` `\r\n` `\r\n` `\r\n` `\r\n` `\r\n` `\r\n\r\n[Back](http://tkurian-programming.blogspot.ca/p/globalizer.html)"}